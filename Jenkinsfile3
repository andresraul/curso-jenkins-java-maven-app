pipeline {
    agent any
    environment {
        gitcommit = "${gitcommit}" //Creamos una variable globar dentro del environment que podremos utilizar globalmente y
                                  //utilizaremos para guardar el nombre del commit
    }
    tools {
        maven 'mavenjenkins' //utilizamos el la instalación de maven que hemos definido previamente en jenkins
    }

    stages {

        stage('Verificación SCM') {
          steps {
            script {
              checkout scm
              sh "git rev-parse --short HEAD > .git/commit-id" //guardamos el nombre corto del commit en el archivo commit-id
              gitcommit = readFile('.git/commit-id').trim() //asignamos el nombre del commit a la variable que creamos anteriormente 
            }
          }  
        }
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package' //Empaquetamos la aplicación y saltamos los tests
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test' //Ejecutamos los tests
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml' //Guardamos el reporte del test
                }
            }
        }
        stage('Docker Build & Push') {//Iniciamos la creación del contenedor. OJO: debemos tener un archivo Dockerfile en la raíz para que se cree
          steps {
            script {  
              docker.withRegistry('https://registry.hub.docker.com', 'docker-hub') {//Indicamos dónde registrarse como primer argumento y 
                                                                                    //como segundo las credenciales
                def appmavenjenkins = docker.build("andresrmateo/mavenjenkins:${gitcommit}", ".") //creamos el contenedor undicando el nombre
                                                                                                  //y el tap, que es el nombre del commit
                appmavenjenkins.push() //Hacemnos el push al Docker hub
              }
            }  
          }  
        }
    }
}
